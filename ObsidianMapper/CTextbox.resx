<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIB0AAAEAIAAcDwAAFgAAACgAAAAgAAAAOgAAAAEAIAAAAAAAgA4AAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJS0tACUt
        LSAgIyOoICQkcSUsLCcxQUEEKjQ0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsOTkAKjY2BSIo
        KEYkKiorIiYmXxwdHfscHR37HR4e3h8iIp4mLi4hIyoqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFN3dwAFAAAAKDIyEys3
        NgokKiojHR8f3R0eHugfISHiHh4e/xwcHP8cHBz/HR4e3iQrKyMkKioAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5aWgA8VlYBd8TEADA/
        PwUfIiKcHiAgvSAiIqcdHR37HRwc/x8fH/8gICD/ICAg/x8fH/8gIiLCJi8vITZNTAItOzsAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABPaGcAGBYWACIm
        Jk8gIyOAIygoWB0eHuQcHBz/Hx8f/yAgIP8iIiL/JCQk/yEhIf8gICD/ICAg/x4eHvodHh7ZHyEhmCEl
        JU0lLCwUDQAAADZUUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjKCgAJCsrGiIn
        Jz8pMzMZHiAgshwcHP8eHx/3Hx8f/h8fH/8hISH/ISEh/yYmJv8oKCj/Kioq/yoqKv8lJSX/Hh4e/xwc
        HP8cHBz/HB0d+iAjI4AAAAAAO1VVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsOzsFKjY2EQAA
        AAAgIiJvHR0d9B8gINIfHx/zHR0d/x8fH/8gICD/JCQk/ygoKP8oKCj/Kysr/yoqKv8uLi7/MDAw/y0t
        Lf8mJib/IiIi/x0dHf8dHR36ISQkUx0eHgBQf38AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMq
        KjcfISHBICMjlB8gIMocHBz/Hh4e/yAgIP8iIiL/JiYm/yUlJf8oKCj/KCgo/ywsLP8wMDD/Ly8v/zAw
        MP8wMDD/Kysr/ygoKP8lJSX/ICAg/x8gIPkgIiKbISYmQSk0NAYoMjIAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISUlexwdHf0dHR3/ICAg/yAgIP8jIyP/IiIi/yQkJP8oKCj/Kioq/y8vL/8uLi7/Ly8v/zAw
        MP8wMDD/MDAw/zAwMP8vLy//LS0t/ycnJ/8hISH/Hh4e/xwcHP8eHx/JJy8vEycvLwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAlLCwmISQkbh8hIdogICD/IiIi/ygoKP8oKCj/LCws/ywsLP8tLS3/MDAw/zAw
        MP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/y0tLf8lJSX/Hx8f/yAjI5Wi//8BNEZGAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAACk0NAAqNjUOHiAgwx0dHf8hISH/JiYm/yoqKv8wMDD/MDAw/zAw
        MP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/Ly8v/ykpKf8nJyf/ISIi2B8i
        IoUjKCg8KjQ0Df///wBFYWAAAAAAAAAAAAAAAAAAJCoqACUuLSseIB/dHBwc/x8fH/8hISH/Jycn/yws
        LP8vLy//MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8vLy//Kysr/yYm
        Jv8dHR3/HBwc/x0eHvEeICDCIigoPx4eHgBheHgAAAAAAAAAAAApNDQALDo6BiQrKzEhJCSaHx8f/iEh
        If8mJib/KCgo/y0tLf8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAw
        MP8wMDD/Kioq/yIiIv8fHx//HBwc/x0dHfIiJyZAHyIiAAAAAAAAAAAAAAAAAAAAAAA4S0sAAAAAAB8i
        IoccHBz/HR0d/yIiIv8mJib/Li4u/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAw
        MP8wMDD/MDAw/zAwMP8qKir/KCgo/yQkJP8fHx//HyAg4iQpKUMpMzMJAAAAAC5AQAAAAAAAAAAAADBE
        RAAzSEgHICQkmB0eHvIcHBz/HBwc/x4eHv8kJCT/Kioq/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAw
        MP8wMDD/MDAw/zAwMP8wMDD/MDAw/y0tLf8qKir/IyMj/yAgIP8eHh7+HR0d7yAjI4w3Tk4EL0BAAAAA
        AAAAAAAAN1VUAGfCwAArOTkNJCsrOiAkJIIeICDJHx8f+CAgIP8lJSX/Ly8v/zAwMP8wMDD/MDAw/zAw
        MP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8sLCz/Jycn/x8fH/8cHR3/ICMjew8G
        BgA6UFAAAAAAAAAAAAAAAAAAAAAAAAAAAABCYWEAEg0NACg0MycfISHcHh4e/ygoKP8wMDD/MDAw/zAw
        MP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8uLi7/KCgo/yQl
        Jf0iJSWPIykpKyo4OAUoNDMAAAAAAAAAAAAAAAAAAAAAAML39wAfISEAIikpSx0dHfcdHR3/Jycn/ysr
        K/8vLy//MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/ysr
        K/8oKCj/JSUl/x0dHf8eHx/VJS0tIiQrKwAAAAAAAAAAAAAAAAAAAAAAZoGBAB8iIgAlLCwoICMjjSEi
        It4nJyf/KSkp/y8vL/8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAw
        MP8vLy//JCQk/yIiIv8hISH/HBwc/x4gILgtOTgKKzY1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADVI
        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
</value>
  </data>
</root>